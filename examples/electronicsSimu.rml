<?xml version="1.0" encoding="UTF-8" standalone="no" ?>

<TRestManager name="RESTManagerSim" title="Template manager to process a simulation generated by restG4.">

  This file is an example of REST simulation functionality. We process the output root file
  from restG4, converting its TRestGeant4Event to TRestRawSignalEvent. In this process we simulated electronics
  noise, shaping, channel non-uniformity, and gain non-linearity

  After you generated a root file(e.g. example.root), you can run restManager to do simulation:
  restManager --c electronsSimu.rml --i example.root --o output.root

  <TRestRun name="Run metadata" title="REST Metadata run info (template)">
    <parameter name="experimentName" value="Test"/>
    <parameter name="runType" value="simulation"/>
    <parameter name="runNumber" value="-1"/> //it will find next run number from database when we use "auto"
    <parameter name="runTag" value="Template"/>
    <parameter name="runDescription" value="We launch just 100 events to check everything is ok."/>
    <parameter name="user" value="${USER}"/>
    <parameter name="verboseLevel" value="2"/>
    <parameter name="outputFile" value="default.root" />

    /// from the previously saved metadata file("restManager --c saveMetadataFile.rml --o meta.root")
    <addMetadata type="TRestDetectorReadout" name="Panda-CDR" file="meta.root"/>
    <addMetadata type="TRestDetectorGas" name="Xenon-TMA 1Pct 10-10E3Vcm" file="meta.root"/>

  </TRestRun>


  <TRestProcessRunner name="TemplateEventProcess" verboseLevel="info">
    <parameter name="eventsToProcess" value="0" />
    <parameter name="threadNumber" value="2"/>

    <parameter name="inputAnalysisStorage" value="off"/>
    <parameter name="inputEventStorage" value="on"/>
    <parameter name="outputEventStorage" value="on"/>

    <!--<addProcess type="TRestGeant4AnalysisProcess" name="g4Ana" value="ON" file="processes.rml"/>
    <addProcess type="TRestGeant4BlobAnalysisProcess" name="g4Blob" value="OFF" file="processes.rml"/>-->
    <addProcess type="TRestGeant4ToDetectorHitsProcess" name="g4ToHits" value="ON"/>
    <addProcess type="TRestDetectorElectronDiffusionProcess" name="electronDiffusion_1kVcm_10atm" value="ON" maxHits="100">
      <parameter name="electricField" value="1" units="kV/cm" />
      <parameter name="gasPressure" value="10" />
    </addProcess>
    <addProcess type="TRestDetectorHitsToSignalProcess" name="hitsToSignal" value="ON">
      <parameter name="sampling" value="200ns" />
      <parameter name="electricField" value="1000" units="V/cm" />
      <parameter name="gasPressure" value="10" />
    </addProcess>
    <addProcess type="TRestChannelGainCorrectionProcess" name="gainCorr" value="OFF" />
    <addProcess type="TRestDetectorSignalToRawSignalProcess" name="s2rs" value="ON"
                triggerDelay="150" sampling="200ns" gain="10"
                verboseLevel="1"/>
    <addProcess type="TRestRawSignalShapingProcess" name="rsShaping" value="ON"
                shapingTime="5" />
    <addProcess type="TRestRawSignalAddNoiseProcess" name="rsNoise" value="ON" noiseLevel="1" />
    <addProcess type="TRestRawSignalAnalysisProcess" name="sAna" value="ON" file="processes.rml">
      <parameter name="pointThreshold" value="3" />
      <parameter name="pointsOverThreshold" value="3" />
    </addProcess>


    <!--<addProcess type="TRestDetectorSignalGaussianConvolutionProcess" name="gConv" value="OFF" file="processes.rml"/>
    <addProcess type="TRestAddSignalNoiseProcess" name="addSignalNoiseProcess" value="OFF" file="processes.rml"/>
    <addProcess type="TRestDetectorSignalAnalysisProcess" name="sgnlAna2" value="OFF" file="processes.rml"/>-->

  </TRestProcessRunner>

  <addTask type="processEvents" value="ON" />

  <globals>
    <parameter name="verboseLevel" value="essential" /> %options are : silent(0), essential(1), info(2), debug(3), extreme(4)
    <parameter name="inputFile" value=""/>
    <searchPath value="$ENV{REST_INPUTDATA}/definitions/"/>
  </globals>


</TRestManager>


<!--parameter here is accessible to all the classes-->
