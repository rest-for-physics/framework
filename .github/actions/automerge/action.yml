name: "Automatic PR checks and merge"
description: "Checks if a particular branch and pull request exist in a repository"
inputs:
  branch:
    description: "Branch to checkout"
    required: true
  repository:
    description: "Repository"
    required: true
  token:
    description: "Authentification token"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repository }}
        path: repository
    - name: Check repository branch
      id: repositoryBranch
      run: |
        cd repository
          var=$(git ls-remote --heads origin ${{ inputs.branch }})
          if [[ -z $var ]]; then
            echo "Branch "${{ inputs.branch }}" not found in " ${{ inputs.repository }}
            echo "::set-output name=exist::false"
          else
            echo "Branch "${{ inputs.branch }}" found in " ${{ inputs.repository }}
            git fetch
            git checkout ${{ inputs.branch }}
            git pull
            echo "::set-output name=exist::true"
          fi
      shell: bash
    - name: Check PR
      id: PRCheck
      if:  steps.repositoryBranch.outputs.exist == 'true'
      run: |
        cd repository
        #Check PR
        gh auth status
        gh pr status
        gh pr view
        prurl=$(gh pr view --json url -t '{{ .url }}')
        echo "::set-output name=prurl::$prurl"
        mergeStateStatus=$(gh pr view --json mergeStateStatus -t '{{ .mergeStateStatus }}')
        echo "MergeStateStatus " $mergeStateStatus
        echo "::set-output name=mergeStateStatus::$mergeStateStatus"
          if [[ $mergeStateStatus != "CLEAN" ]]; then
            echo "No valid PR found for branch " ${{ inputs.branch }} " in " ${{ inputs.repository }}  " merge is not allowed"
            exit 1
          fi
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      shell: bash 
    - name: Print outputs
      if:  steps.repositoryBranch.outputs.exist == 'true'
      run: |
        echo "Merge status " ${{ steps.PRCheck.outputs.mergeStateStatus }}
        echo "PR url " ${{ steps.PRCheck.outputs.prurl }}
      shell: bash
    - name: Merge PR
      if: (github.event.action == 'closed' && github.event.pull_request.merged == true && steps.PRCheck.outputs.mergeStateStatus == 'CLEAN' && steps.repositoryBranch.outputs.exist == 'true')
      run: |
        cd repository
        gh auth status
        echo "actor " ${{ github.actor }}
        prState=$(gh pr view --json pullRequestState -t '{{ .pullRequestState }}')
        echo "PullRequestState " $prState
          if [[ $prState == "MERGED" ]]; then
            echo "PR already merged, doing nothing"
          else
            gh pr merge --auto --merge "$PR_URL"
          fi
      env:
        PR_URL: ${{ steps.PRCheck.outputs.prurl }}
        GITHUB_TOKEN: ${{ inputs.token }}
      shell: bash
