#!/usr/bin/python
# -*- coding: utf-8 -*-

# This script generates the version header to be used in REST installation
# J. Galan - Javier.Galan.Lacarra@cern.ch
# 8 - Oct - 2018

import os,sys,re,filecmp
import subprocess

if len(sys.argv) < 2:
    print ""
    print "Usage: ./generateVersionHeader.py XXX.h [SE]"
    print ""
    print "If any additional argument different from OFF is provided as [SE].\nSchema evolution will be defined as enabled."
    print ""
    exit(1)

outputHeader = sys.argv[1]

seOption = "ON"
if len(sys.argv) > 2:
	seOption = sys.argv[2]


restRelease="2.2.10"
date="2019-04-13"
time="11:00:22 +0200"
commit="d5c684bc"
branchName="master"
tag="v2.2.10"
code=131594


p = subprocess.Popen(['git branch'], stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True)
out, err = p.communicate()

if err != "":
    print "WARNING! git repository is not initialized. TRestVersion.h will not be generated! REST will use default version header..."
else:
    branchName = os.popen( "git branch | grep -e \"^*\" | cut -d\' \' -f 2" ).read().rstrip("\n")

    commit = os.popen('git rev-parse --verify HEAD' ).read().rstrip("\n")
    tag = os.popen( 'git describe --tags HEAD' ).read().rstrip("\n")
    if( tag.find("-") != -1 ):
        tag = tag[0:tag.find("-")]

    command = "git log -1 --format=%ai " + str( tag )
    datetime = os.popen( command ).read().rstrip("\n")
    date = datetime[0:10]
    time = datetime[11:]

    first =  tag.find(".")
    last = tag.rfind(".")
    a = int( re.sub("[^0-9]", "", tag[0:first] ) )
    b = int( re.sub("[^0-9]", "", tag[first+1:last] ) )
    c = int( re.sub("[^0-9]", "", tag[last+1:] ) )
    restRelease = str(a) + "." + str(b) + "." + str(c)

    code = a << 16 + b << 8 + c
    codeA = a << 16 
    codeB = b << 8
    codeC = c 
    code = codeA + codeB + codeC

print "-- Generating TRestVersion.h. Release : " + restRelease


f = open( "TRestVersion.tmp" , "w")

f.write("#ifndef REST_Version\n")
f.write("#define REST_Version\n")

f.write("/* Version information automatically generated by installer. */")

f.write("/*\n")
f.write(" * These macros can be used in the following way:\n")
f.write(" * \n" )
f.write(" * #if REST_VERSION_CODE >= REST_VERSION(2,23,4)\n")
f.write(" *     #include <newheader.h>\n" )
f.write(" * #else\n")
f.write(" *     #include <oldheader.h>\n" )
f.write(" * #endif\n")
f.write(" *\n" )
f.write(" */\n" )
f.write("#define REST_RELEASE \""+restRelease+"\"\n" )
f.write("#define REST_RELEASE_DATE \""+date+"\"\n" )
f.write("#define REST_RELEASE_TIME \""+time+"\"\n" )
f.write("#define REST_GIT_COMMIT \""+commit[0:8]+"\"\n" )
f.write("#define REST_GIT_BRANCH \""+branchName+"\"\n" )
f.write("#define REST_GIT_TAG \""+tag+"\"\n" )
f.write("#define REST_VERSION_CODE "+str(code)+"\n" )
f.write("#define REST_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))\n")

if seOption == "OFF":
	f.write("#define REST_SCHEMA_EVOLUTION \"OFF\"\n" )
else:
	f.write("#define REST_SCHEMA_EVOLUTION \"ON\"\n" )

f.write("#endif\n")
f.close()

if os.path.exists( outputHeader ) and filecmp.cmp( "TRestVersion.tmp", outputHeader ):
    os.remove( "TRestVersion.tmp" )
else:
    os.rename( "TRestVersion.tmp", outputHeader )

exit(0)
