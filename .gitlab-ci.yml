image: nkx1231/root6-geant4-garfield:0.5

variables:
      GIT_SUBMODULE_STRATEGY: recursive

stages:
    # Basic checks to verify correctness of code
  - pre-build

    # Basic validation tests of installation
  - libraries

    # Project compilation validation
  - build

    # Basic validation tests of installation
  - install

    # Stage dedicated to validate metadata classes. gas, readout, g4Metadata, etc
  - metadata

    # Stage to validate restG4 package examples
  - restG4

    # Stage to validate data chain processing constructions (TREX-DM data, PandaX-III topology, etc).
  - restManager_process

    # Stage to validate tasks or executions over preprocessed data filesx
  - postProcessing

    # Stage to validate other restManager tasks (metadata generation, script loading, etc).
  - restManager_generate

    # Scripts to launch more complete tests. TRestGas file generation, Geant4 physics validation, etc.
  - deploy

before_script:
  - export USER="test"
  - echo $CI_SERVER_HOST
  - echo $CRONJOB
    # We redefine the HOME
  - export HOME=${CI_PROJECT_DIR}/install/
  - if [ -d $HOME/.rest ]; then rm -Rf $HOME/.rest; fi
  - git submodule sync --recursive
  - git submodule update --init --recursive

axion-pipeline:
  stage: libraries
  image: $PIPELINE_TRIGGER_IMAGE
  variables:
    GIT_STRATEGY: none
    TRIGGER_TARGET_REPO_ID: git@lfna.unizar.es:iaxo/RestAxionLib.git
  script:
      - "curl --request POST \
     --form token=bd53c38cdd1395ffeb14d297ebe202 \
     --form ref=master \
     https://lfna.unizar.es/iaxo/RestAxionLib"

clang-format:
    stage: pre-build
    script:
        - cd ${CI_PROJECT_DIR}/
        - if [ -n "$CRONJOB" ]; then ./scripts/pipeline/clangformattest.sh; else echo "Skipping clang-format"; fi
        - clang-format --version
    only:
        variables:
            - $CRONJOB == "YES"
            - $CI_SERVER_HOST == "lfna.unizar.es"

validateCode:
    stage: pre-build
    script:
        - python ${CI_PROJECT_DIR}/scripts/pipeline/validateProcesses.py ${CI_PROJECT_DIR}/source/processes/
    except:
        variables:
            - $CRONJOB == "YES"

build:
  type: build
  script:
    - mkdir /tmp/rest && cd /tmp/rest
    - rm -rf ${CI_PROJECT_DIR}/install
    - cmake ${CI_PROJECT_DIR} -DREST_WELCOME=OFF -DREST_GARFIELD=ON -DREST_G4=ON -DINSTALL_PREFIX=${CI_PROJECT_DIR}/install
    - make install -j2
    - . ${CI_PROJECT_DIR}/install/thisREST.sh
  except:
      variables:
        - $CRONJOB == "YES"
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/install
    expire_in: 1 day

loadRESTLibs:
  type: install
  script:
    - . ${CI_PROJECT_DIR}/install/thisREST.sh
    - root -b -q ${CI_PROJECT_DIR}/scripts/pipeline/loadLibraries.C
    - restRoot -b -q
  except:
      variables:
        - $CRONJOB == "YES"

listRESTMacros:
  type: install
  script:
    - . ${CI_PROJECT_DIR}/install/thisREST.sh
    - restManager ListMacros
  except:
      variables:
        - $CRONJOB == "YES"

01_NLDBD:
  type: restG4
  script:
    - . ${CI_PROJECT_DIR}/install/thisREST.sh
    - cd ${CI_PROJECT_DIR}/install/examples/01.NLDBD/
    - restG4 NLDBD.rml
    - geant4-config --version
    - restRoot -b -q Validate.C'("Run00001_NLDBD_Test.root")'
  except:
      variables:
        - $CRONJOB == "YES"
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/install/examples/01.NLDBD/Run00001_NLDBD_Test.root
    expire_in: 1 day

LoadGas:
  type: metadata 
  script:
    - . ${CI_PROJECT_DIR}/install/thisREST.sh
    - cd ${CI_PROJECT_DIR}/scripts/pipeline/metadata/gas/
    - restRoot -b -q LoadGasFromServerAndValidate.C
  except:
      variables:
        - $CRONJOB == "YES"

GenerateGas:
  type: metadata 
  script:
    - . ${CI_PROJECT_DIR}/install/thisREST.sh
    - cd ${CI_PROJECT_DIR}/scripts/pipeline/metadata/gas/
    - restRoot -b -q GenerateDummyGas.C
  only:
      variables:
        - $CI_SERVER_HOST == "lfna.unizar.es"
  except:
      variables:
        - $CRONJOB == "YES"

GenerateReadout:
  type: metadata 
  script:
    - . ${CI_PROJECT_DIR}/install/thisREST.sh
    - cd ${CI_PROJECT_DIR}/scripts/pipeline/metadata/readout/
    - restManager --c generateReadout.rml --o readout.root
    - restRoot -b -q PrintReadout.C'("readout.root")' > /dev/null
    - diff validation.txt print.txt
  except:
      variables:
        - $CRONJOB == "YES"

BasicReadout:
  type: metadata 
  script:
    - . ${CI_PROJECT_DIR}/install/thisREST.sh
    - cd ${CI_PROJECT_DIR}/projects/basic-readouts/
    - ls
    - restRoot --m 1 -b -q GenerateReadouts.C'("basic.root")'
    - restRoot -b -q BasicValidation.C'("basic.root", "pixelDecoding")'
  except:
      variables:
        - $CRONJOB == "YES"

testMeta:
  type: restManager_generate
  script:
    - . ${CI_PROJECT_DIR}/install/thisREST.sh
    - cd ${CI_PROJECT_DIR}/install/examples
    - restManager --c saveMetadataFile.rml --o meta.root
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/install/examples/meta.root
    expire_in: 1 day
  except:
      variables:
        - $CRONJOB == "YES"

trexDM_data: 
  type: restManager_process
  script:
    - . ${CI_PROJECT_DIR}/install/thisREST.sh
    - cd ${CI_PROJECT_DIR}/scripts/pipeline/trex
    - wget https://sultan.unizar.es/trexdm-readouts/readouts_v2.3.root
    - restManager --c 01_raw.rml --f *.aqs
    - restManager --c 02_signal.rml --f RawData.root
    - restManager --c 03_hits.rml --f Signals.root
    - restRoot -b -q ../MakeBasicTree.C'("Hits.root")'
    - rm RawData.root
    - rm Signals.root
    - root -b -q ../ValidateTrees.C
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/scripts/pipeline/trex/results.root
      - ${CI_PROJECT_DIR}/scripts/pipeline/trex/Hits.root
    expire_in: 1 week
  except:
      variables:
        - $CRONJOB == "YES"

  # Temporally quarantined
  #
  #pandaXIII_MC: 
  #type: restManager_process
  #script:
  #- . ${CI_PROJECT_DIR}/install/thisREST.sh
  #- cd ${CI_PROJECT_DIR}/scripts/pipeline/pandaxiii_MC
  #- restG4 Xe136bb0n.rml
  #- restRoot -b -q ValidateG4.C'("Xe136bb0n_n2E06.root")'
  #- restManager --c AllProcesses.rml --i testInput.root --o testOutput.root --j 1
  #- restRoot -b -q ../MakeBasicTree.C'("testOutput.root")'
  #- restRoot -b -q ../ValidateTrees.C
  #- restManager --c plots.rml --i testOutput.root
  #artifacts:
  #paths:
  #- ${CI_PROJECT_DIR}/scripts/pipeline/pandaxiii_MC/trackParameter.png
  #expire_in: 1 week
  #except:
  #variables:
  #- $CRONJOB

pandaXIII_data: 
  type: restManager_process
  script:
    - . ${CI_PROJECT_DIR}/install/thisREST.sh
    - cd ${CI_PROJECT_DIR}/scripts/pipeline/pandaxiii_data
    - restManager --c P3AutoChain.rml --i CoBo_AsAd0_2019-03-15.graw --o testOutput.root --j 1
    - restRoot -b -q ../MakeBasicTree.C'("testOutput.root")'
    - restRoot -b -q ../ValidateTrees.C
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/scripts/pipeline/pandaxiii_data/TriggerRate.png
    expire_in: 1 week
  except:
      variables:
        - $CRONJOB

AnalysisPlot:
  type: postProcessing
  script:
    - . ${CI_PROJECT_DIR}/install/thisREST.sh
    - cd ${CI_PROJECT_DIR}/scripts/pipeline/analysisPlot/
    - restManager --c summary.rml --f ${CI_PROJECT_DIR}/scripts/pipeline/trex/Hits.root
  except:
      variables:
        - $CRONJOB == "YES"

deploy:
  type: deploy
  only:
    - tags
  script:
    - . ${CI_PROJECT_DIR}/install/thisREST.sh
    - rest-config --welcome
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/install
  except:
      variables:
        - $CRONJOB == "YES"
